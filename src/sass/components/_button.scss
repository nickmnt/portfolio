.pulse:hover, 
.pulse:focus {
  animation: pulse 1s;
  box-shadow: 0 0 0 2em transparent;
}

@keyframes pulse {
  0% { box-shadow: 0 0 0 0 var(--hover); }
}

$colors: (
  fill: #a972cb,
  pulse: #ef6eae, 
  close: #ff7f82, 
  raise: #ffa260, 
  up: #e4cb58, 
  slide: #8fc866, 
  offset: #19bc8b
);

// Sass variables compile to a static string; CSS variables are dynamic and inherited
  // Loop through the map and set CSS custom properties using Sass variables
@each $button, $color in $colors {
  .#{$button} {
    --color: #{$color};
    --hover: #{adjust-hue($color, 45deg)};
  }
}

// Now every button will have different colors as set above. We get to use the same structure, only changing the custom properties.
button {  
  color: var(--color);
  transition: 0.25s;
  
  &:hover,
  &:focus { 
    border-color: var(--hover);
    color: #fff;
  }
}

body {
    margin:0;
    background-color:#191919;
    min-height:100vh;
    display:flex;
    align-items:center;
    justify-content:center;
    font-family:Helvetica,Sans-serif;
  }
  a {
    text-decoration:none;
    color:#FFF;
  }
  .rainbow-button {
    width:calc(20vw + 6px);
    height:calc(8vw + 6px);
    background-image: linear-gradient(90deg, #00C0FF 0%, #FFCF00 49%, #FC4F4F 80%, #00C0FF 100%);
    border-radius:5px;
    display:flex;
    align-items:center;
    justify-content:center;
    text-transform:uppercase;
    font-size:3vw;
    font-weight:bold;
  }
  .rainbow-button:after {
    content:attr(alt);
    width:20vw;
    height:8vw;
    background-color:#191919;
    display:flex;
    align-items:center;
    justify-content:center;
  }
  .rainbow-button:hover {
    animation:slidebg 2s linear infinite;
  }
  
  @keyframes slidebg {
    to {
      background-position:20vw;
    }
  }